import { DefineComponent, ComponentOptionsMixin, PublicProps, ComponentProvideOptions } from 'vue';
declare const _default: __VLS_WithTemplateSlots<DefineComponent<{}, {
    cancelSelection: typeof cancelSelection;
    selectRows: typeof selectRows;
    sortBy: typeof sortBy;
    $emit: (event: "actionClick" | "emptyStateActionClick" | "update:searchString" | "searched" | "selectionChanged" | "selectPage" | "sortingChanged" | "itemsPerPageChanged" | "selectionActionClicked", ...args: any[]) => void;
    texts: Record<string, any>;
    id: string;
    loading: boolean;
    busy: boolean;
    searchString: string;
    idAttribute: string;
    actionDefinitions: unknown[];
    items: unknown[];
    hasSearch: boolean;
    hasSelecting: boolean;
    selectingKind: string;
    emptyStateIcon: string;
    searchSide: string;
    selectionActionDefinitions: unknown[];
    searchMode: string;
    showHeader: boolean;
    stickyHeader: boolean;
    columnDefinitions: unknown[];
    defaultActionName: string;
    skeletonRowCount: number;
    scrollable: string | boolean;
    showToolbar: boolean;
    showStatusbar: boolean;
    showAllColumns: boolean;
    showItemsCountSelector: boolean;
    hasPaging: boolean;
    hasSorting: boolean;
    sortingSide: string;
    sortingIgnoreEmpty: boolean;
    pageCurrent: number;
    itemsPerPage: number;
    itemsTotal: number;
    sortingMode: string;
    clickableRole: string;
    label?: string;
    description?: string;
    emptyStateActionDefinitions?: unknown[];
    actionAdditionalParameter?: string;
    $props: {
        readonly texts?: Record<string, any>;
        readonly id?: string;
        readonly loading?: boolean;
        readonly busy?: boolean;
        readonly searchString?: string;
        readonly idAttribute?: string;
        readonly actionDefinitions?: unknown[];
        readonly items?: unknown[];
        readonly hasSearch?: boolean;
        readonly hasSelecting?: boolean;
        readonly selectingKind?: string;
        readonly emptyStateIcon?: string;
        readonly searchSide?: string;
        readonly selectionActionDefinitions?: unknown[];
        readonly searchMode?: string;
        readonly showHeader?: boolean;
        readonly stickyHeader?: boolean;
        readonly columnDefinitions?: unknown[];
        readonly defaultActionName?: string;
        readonly skeletonRowCount?: number;
        readonly scrollable?: string | boolean;
        readonly showToolbar?: boolean;
        readonly showStatusbar?: boolean;
        readonly showAllColumns?: boolean;
        readonly showItemsCountSelector?: boolean;
        readonly hasPaging?: boolean;
        readonly hasSorting?: boolean;
        readonly sortingSide?: string;
        readonly sortingIgnoreEmpty?: boolean;
        readonly pageCurrent?: number;
        readonly itemsPerPage?: number;
        readonly itemsTotal?: number;
        readonly sortingMode?: string;
        readonly clickableRole?: string;
        readonly label?: string;
        readonly description?: string;
        readonly emptyStateActionDefinitions?: unknown[];
        readonly actionAdditionalParameter?: string;
    };
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, true, {}, any>, {
    toolbar?(_: {}): any;
    customResponsiveItem?(_: {
        item: unknown;
    }): any;
    customResponsiveHeader?(_: {
        item: unknown;
        expanded: any;
    }): any;
}>;
export default _default;
declare function cancelSelection(): void;
declare function selectRows(arr?: any): void;
declare function sortBy(columnCode: any, direction?: string): void;
type __VLS_WithTemplateSlots<T, S> = T & (new () => {
    $slots: S;
});
